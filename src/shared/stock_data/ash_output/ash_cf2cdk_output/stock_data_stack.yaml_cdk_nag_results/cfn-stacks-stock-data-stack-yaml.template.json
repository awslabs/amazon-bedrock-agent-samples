{
 "Description": "Deploy Docker-based stock data Lambda with Pandas layer (container image)",
 "AWSTemplateFormatVersion": "2010-09-09",
 "Resources": {
  "StockLambdaECRRepo": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "RepositoryName": "stock-data-tools"
   }
  },
  "CodeBuildRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": {
        "Service": "codebuild.amazonaws.com"
       },
       "Action": "sts:AssumeRole"
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:CompleteLayerUpload",
          "ecr:InitiateLayerUpload",
          "ecr:PutImage",
          "ecr:UploadLayerPart"
         ],
         "Resource": "*"
        },
        {
         "Effect": "Allow",
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Resource": "*"
        }
       ]
      },
      "PolicyName": "CodeBuildECRPolicy"
     }
    ]
   }
  },
  "CodeBuildProject": {
   "Type": "AWS::CodeBuild::Project",
   "Properties": {
    "Artifacts": {
     "Type": "NO_ARTIFACTS"
    },
    "Environment": {
     "ComputeType": "BUILD_GENERAL1_SMALL",
     "EnvironmentVariables": [
      {
       "Name": "IMAGE_REPO_NAME",
       "Value": {
        "Ref": "StockLambdaECRRepo"
       }
      },
      {
       "Name": "IMAGE_TAG",
       "Value": "latest"
      },
      {
       "Name": "AWS_DEFAULT_REGION",
       "Value": {
        "Ref": "AWS::Region"
       }
      },
      {
       "Name": "AWS_ACCOUNT_ID",
       "Value": {
        "Ref": "AWS::AccountId"
       }
      }
     ],
     "Image": "aws/codebuild/standard:5.0",
     "PrivilegedMode": true,
     "Type": "LINUX_CONTAINER"
    },
    "Name": "stock-lambda-docker-build",
    "ServiceRole": {
     "Fn::GetAtt": "CodeBuildRole.Arn"
    },
    "Source": {
     "BuildSpec": "version: 0.2\nphases:\n  pre_build:\n    commands:\n      - echo Logging into ECR...\n      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n      - cd src/shared/stock_data/docker_files\n  build:\n    commands:\n      - docker build -t $IMAGE_REPO_NAME .\n      - docker tag $IMAGE_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest\n  post_build:\n    commands:\n      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest\n",
     "GitCloneDepth": 1,
     "Location": "https://github.com/LucaiB/amazon-bedrock-agent-samples.git",
     "Type": "GITHUB"
    }
   }
  },
  "StockLambdaExecutionRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       },
       "Action": "sts:AssumeRole"
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    ],
    "RoleName": {
     "Fn::Sub": "stock-lambda-execution-role-${AWS::Region}"
    }
   }
  },
  "StockLambdaFunction": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/stock-data-tools:latest"
     }
    },
    "Environment": {
     "Variables": {
      "LOG_LEVEL": "INFO"
     }
    },
    "FunctionName": "stock_data_tools",
    "MemorySize": 512,
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": "StockLambdaExecutionRole.Arn"
    },
    "Timeout": 600
   },
   "DependsOn": [
    "BuildCodeCustomResource"
   ]
  },
  "BuildCodeCustomResourceRole": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       },
       "Action": "sts:AssumeRole"
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "codebuild:StartBuild",
          "codebuild:BatchGetBuilds"
         ],
         "Resource": "*"
        },
        {
         "Effect": "Allow",
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Resource": "*"
        }
       ]
      },
      "PolicyName": "TriggerCodeBuild"
     }
    ]
   }
  },
  "BuildCodeCustomResourceFunction": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3\nimport os\nimport time\nimport cfnresponse\n\ndef handler(event, context):\n    client = boto3.client(\"codebuild\")\n    if event['RequestType'] == 'Create':\n        build = client.start_build(projectName=os.environ['PROJECT'])\n        build_id = build['build']['id']\n        while True:\n            status = client.batch_get_builds(ids=[build_id])['builds'][0]['buildStatus']\n            if status in ['SUCCEEDED', 'FAILED', 'FAULT', 'TIMED_OUT', 'STOPPED']:\n                break\n            time.sleep(10)\n    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})\n"
    },
    "Environment": {
     "Variables": {
      "PROJECT": {
       "Ref": "CodeBuildProject"
      }
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": "BuildCodeCustomResourceRole.Arn"
    },
    "Runtime": "python3.12",
    "Timeout": 300
   }
  },
  "BuildCodeCustomResource": {
   "Type": "Custom::BuildCode",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": "BuildCodeCustomResourceFunction.Arn"
    }
   }
  },
  "AgentAliasLambdaPermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "StockLambdaFunction"
    },
    "Principal": "bedrock.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::Sub": "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*"
    }
   },
   "DependsOn": [
    "StockLambdaFunction"
   ]
  },
  "AgentLambdaPermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "StockLambdaFunction"
    },
    "Principal": "bedrock.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::Sub": "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"
    }
   },
   "DependsOn": [
    "StockLambdaFunction"
   ]
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/yWMywqDMBBFv6X7OFU3dV8odNViP0DiZISxSUbyqBTx30vq6h7OhdNC012gPuk1VmjeleURtlfS+FZoJZtJgtOJxQ/s0WZDcJ38/UCl1zhshKG4nhaJnCR8FWv3N2JJoRgaM1tTzDPITJiU1W40Grbr5G/ZY8mrclNwHCOL33f1T0bJAanwI6clp115MQRzPH+aDtoautMcmauQfWJH0B/7A9RxbvLVAAAA"
   },
   "Metadata": {
    "aws:cdk:path": "cfn-stacks-stock-data-stack-yaml/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "LambdaFunctionName": {
   "Value": {
    "Ref": "StockLambdaFunction"
   }
  },
  "ECRRepositoryURI": {
   "Value": {
    "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/stock-data-tools"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-3"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-4"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      }
     ]
    },
    {
     "Fn::Equals": [
      {
       "Ref": "AWS::Region"
      },
      "us-west-2"
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}